name: Release Pipeline

on:
  push: {}
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version'
        required: true
        type: string
      versionName:
        description: 'Release version name'
        required: true
        type: string

jobs:
  release-pipeline:
    name: Release Pipeline\
    runs-on: windows-latest
    env:
      CERT_NAME: cert.pfx
    steps:
      - uses: actions/checkout@v4

      - name: Setup Dotnet Tools
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'

      - name: Run Core.Test
        run: dotnet test .\src\DevOpsDaysTasks.Core.Tests

      - name: Run Integration.Tests
        run: dotnet test .\src\DevOpsDaysTasks.IntegrationTests

      - name: Build Release
        run: dotnet publish -c Release src\DevOpsDaysTasks.UI\ -o DevOpsDaysTasks /p:Version=1.0.0 /p:VersionName=GettingClean_1.0.0

      - name: Checkout.External.Repo
        uses: actions/checkout@v4
        with:
          repository: martinzimmermann/DevOpsDaysGraz2025-ExternalFiles
          path: ExternalFiles

      - name: Copy Workshop.Material
        run: |
          mkdir -p DevOpsDaysTasks/Templates
          mkdir -p DevOpsDaysTasks/Help
          cp ExternalFiles/default-tasks.xml DevOpsDaysTasks/Templates/
          cp ExternalFiles/Help.pdf DevOpsDaysTasks/Help/

      - name: Create.Cert
        run: |
          $base64 = "${{ secrets.DEVOPSDAYS2025CERTIFICATE }}"
          $content = [System.Convert]::FromBase64String($base64)
          Set-Content ${{ env.CERT_NAME }} -Value $content -AsByteStream

      - name: Sign Executable
        run: .\scripts\sign.ps1 .\DevOpsDaysTasks\DevOpsDaysTasks.UI.exe -PfxFile ${{ env.CERT_NAME }} -PfxPassword ${{ secrets.DEVOPSDAYS2025SECRET}}
        shell: powershell

      - name: Test.If.Working
        run: .\DevOpsDaysTasks\DevOpsDaysTasks.UI.exe

      - name: Create.Zip
        run: Compress-Archive -Path DevOpsDaysTasks\* -DestinationPath DevOpsDaysTasks.zip
        shell: powershell

      - name: Upload.Artifact
        uses: actions/upload-artifact@v4
        with:
          name: DevOpsDaysTasks
          path: DevOpsDaysTasks.zip

      - name: Release.This.Dope.Shit
        uses: softprops/action-gh-release@v2
        if: ${{ inputs.version }}
        with:
          name: DevOpsDaysTasks - ${{ inputs.versionName }}
          tag_name: ${{ inputs.version }}
          files: DevOpsDaysTasks.zip


#problem: hardcoded release version

#problem: cert and passwort is in the repo

#problem: we do not have a release

#problem: we dont want to use the workshop folder
# Steps to create a new release:

# 1. Checkout the most recent commit
# 2. Run all tests in the `DevOpsDaysTasks.Core.Tests` project (`dotnet test .\src\DevOpsDaysTasks.Core.Tests`)
# 3. Run all tests in the `DevOpsDaysTasks.IntegrationTests` project (`dotnet test .\src\DevOpsDaysTasks.IntegrationTests`)
# 4. Build a Release version with `dotnet publish -c Release src\DevOpsDaysTasks.UI\ -o DevOpsDaysTasks /p:Version=<version> /p:VersionName=<versionName>` into the `DevOpsDaysTasks` folder. Don't forget to set the correct `<version>` and `<versionName>`
# 5. Copy the `workshop_material\default-tasks.xml` into `DevOpsDaysTasks\Templates\`
# 6. Copy the `workshop_material\Help.pdf` into `DevOpsDaysTasks\Help\`
# 7. (Windows only) Sign the `DevOpsDaysTasks.UI.exe` with `.\scripts\sign.ps1 .\DevOpsDaysTasks\DevOpsDaysTasks.UI.exe -PfxFile .\workshop_material\devopsdays_tasks_codesign.pfx -PfxPassword Password`
# 8. Manually test that everything is working (e.g. help can be displayed, correct templates) by running `DevOpsDaysTasks.UI.exe`
# 9. Create a zip file out of the `DevOpsDaysTasks` folder
# 10. Upload the zip file to GitHub Releases
